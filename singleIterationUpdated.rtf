{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 private void singleIteration() \{\
            int startNode = this.startNode;\
            int endNode = this.endNode;\
\
            RelationshipIterator rels = this.relationshipIterator;\
\
            // TODO make sure endNode - startNode gives a meaningful number here\
            int totalNodes = endNode - startNode;\
            int totalDegrees = 0;\
            double avgDegree = 0.0;\
\
            for (int nodeId = startNode; nodeId < endNode; ++nodeId)\{\
                int degree = degrees.degree(nodeId, Direction.OUTGOING);\
                if (degree > 0) \{\
                    totalDegrees += degree;\
                \}\
            \}\
\
            avgDegree = ((double)totalDegrees) / totalNodes;\
\
            for (int nodeId = startNode; nodeId < endNode; ++nodeId) \{\
                double delta = deltas[nodeId - startNode];\
\
                if (delta > 0) \{\
                    int degree = degrees.degree(nodeId, Direction.OUTGOING);\
                    if (degree > 0) \{\
                        srcRankDelta = (int) (100_000 * (delta / (degree + avgDegree)));\
                        rels.forEachRelationship(nodeId, Direction.OUTGOING, this);\
                    \}\
                \}\
            \}\
        \}}